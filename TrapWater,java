// Time Complexity : O(2n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english  : Find max height which can act as a right wall for left buildings, 
// and left wall for right buildings


class Solution {
    public int trap(int[] height) {
        if(height.length < 1 ) return 0;
        int n = height.length;
        int water = 0;
        
        int lw = height[0];
        int l = 0;
        int max = 0;
        int maxIdx = 0;


        //find the max wall
        for(int i = 0 ; i < n ; i++){
            if(max < height[i]){
                max = height[i];
                maxIdx = i;
            }
        }
        // check water trapped from left 
        while( l < maxIdx){
            if( lw > height[l]){
                water += (lw - height[l]) * 1; // as width is 1
            }
            else{
                lw = height[l];
            }
            l++;
        }

        int r = n-1;
        int rw = height[n-1];

        // check water trapped from right 
        while( r > maxIdx){
            if( rw > height[r]){
                water += (rw - height[r]) * 1; // as width is 1
            }
            else{
                rw = height[r];
            }
            r--;
        }

        return water;

    }
}
// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english  : For any building we need a wall greater that it's height on left and right. 
// Using two pointers maintain which wall can act as a guarantee.

class Solution {
    public int trap(int[] height) {
        if(height.length < 1 ) return 0;
        int n = height.length;
        int water = 0;
        
        int lw = height[0];
        int l = 0;
        int r = n-1;
        int rw = height[n-1];



        while( l <= r){
            // right wall will act as a guarantee for left building
            if(lw <= rw){
                if( lw > height[l]){
                water += (lw - height[l]) * 1; // as width is 1
                }
                else{ //can not trap water
                    lw = height[l];
                }
                l++;
            }
            else{ // left wall will act as a guarantee for right building
                if( rw > height[r]){
                water += (rw - height[r]) * 1; // as width is 1
                }
                else{//can not trap water
                    rw = height[r];
                }
                r--;
            }
            
        }

        return water;

    }
}

//Monotonic decreasing stack
// Time Complexity : O(2n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english  :Resolve all previous smaller heights as soon as an increasing height is encountered.

class Solution {
    public int trap(int[] height) {
        if(height.length < 1 ) return 0;
        int n = height.length;
        int water = 0;

        Stack<Integer> st = new Stack<>();
        
        for(int i = 0 ; i < n ; i++){
            //monotonic decreasing Stack
            while(!st.isEmpty() && height[i] > height[st.peek()]){
                //process water
                int currH = height[st.pop()];

                if(st.isEmpty()) break; // no left wall
                // width * height
                water += (i - st.peek() - 1) * (Math.min(height[st.peek()], height[i]) - currH);
            }

            st.push(i); // add curr wall in stack
    
        }

        return water;
    }
}